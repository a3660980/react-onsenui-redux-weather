webpackHotUpdate(0,{

/***/ 495:
/***/ function(module, exports, __webpack_require__) {

	eval("/* WEBPACK VAR INJECTION */(function(process) {'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _react = __webpack_require__(6);\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = __webpack_require__(!(function webpackMissingModule() { var e = new Error(\"Cannot find module \\\"prop-types\\\"\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()));\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _reactDom = __webpack_require__(259);\n\nvar _reactDom2 = _interopRequireDefault(_reactDom);\n\nvar _shallowEqual = __webpack_require__(350);\n\nvar _shallowEqual2 = _interopRequireDefault(_shallowEqual);\n\nvar _marker_dispatcher = __webpack_require__(496);\n\nvar _marker_dispatcher2 = _interopRequireDefault(_marker_dispatcher);\n\nvar _google_map_map = __webpack_require__(!(function webpackMissingModule() { var e = new Error(\"Cannot find module \\\"./google_map_map\\\"\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()));\n\nvar _google_map_map2 = _interopRequireDefault(_google_map_map);\n\nvar _google_map_markers = __webpack_require__(499);\n\nvar _google_map_markers2 = _interopRequireDefault(_google_map_markers);\n\nvar _google_map_markers_prerender = __webpack_require__(501);\n\nvar _google_map_markers_prerender2 = _interopRequireDefault(_google_map_markers_prerender);\n\nvar _google_map_loader = __webpack_require__(502);\n\nvar _google_map_loader2 = _interopRequireDefault(_google_map_loader);\n\nvar _detect = __webpack_require__(504);\n\nvar _detect2 = _interopRequireDefault(_detect);\n\nvar _geo = __webpack_require__(505);\n\nvar _geo2 = _interopRequireDefault(_geo);\n\nvar _array_helper = __webpack_require__(510);\n\nvar _array_helper2 = _interopRequireDefault(_array_helper);\n\nvar _is_plain_object = __webpack_require__(511);\n\nvar _is_plain_object2 = _interopRequireDefault(_is_plain_object);\n\nvar _pick = __webpack_require__(512);\n\nvar _pick2 = _interopRequireDefault(_pick);\n\nvar _raf = __webpack_require__(513);\n\nvar _raf2 = _interopRequireDefault(_raf);\n\nvar _log = __webpack_require__(514);\n\nvar _log2 = _interopRequireDefault(_log);\n\nvar _isNumber = __webpack_require__(515);\n\nvar _isNumber2 = _interopRequireDefault(_isNumber);\n\nvar _omit = __webpack_require__(500);\n\nvar _omit2 = _interopRequireDefault(_omit);\n\nvar _detectElementResize = __webpack_require__(516);\n\nvar _detectElementResize2 = _interopRequireDefault(_detectElementResize);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /* eslint-disable import/no-extraneous-dependencies, react/forbid-prop-types, react/no-find-dom-node, no-console */\n\n\nvar kEPS = 0.00001;\nvar K_GOOGLE_TILE_SIZE = 256;\n// real minZoom calculated here _getMinZoom\nvar K_IDLE_TIMEOUT = 100;\nvar K_IDLE_CLICK_TIMEOUT = 300;\nvar DEFAULT_MIN_ZOOM = 3;\n\nfunction defaultOptions_() /* maps */{\n  return {\n    overviewMapControl: false,\n    streetViewControl: false,\n    rotateControl: true,\n    mapTypeControl: false,\n    // disable poi\n    styles: [{\n      featureType: 'poi',\n      elementType: 'labels',\n      stylers: [{ visibility: 'off' }]\n    }],\n    minZoom: DEFAULT_MIN_ZOOM };\n}\n\nvar latLng2Obj = function latLng2Obj(latLng) {\n  return (0, _is_plain_object2.default)(latLng) ? latLng : { lat: latLng[0], lng: latLng[1] };\n};\n\nvar _checkMinZoom = function _checkMinZoom(zoom, minZoom) {\n  if (process.env.NODE_ENV !== 'production') {\n    if (zoom < minZoom) {\n      console.warn('GoogleMap: ' + // eslint-disable-line\n      'minZoom option is less than recommended ' + 'minZoom option for your map sizes.\\n' + 'overrided to value ' + minZoom);\n    }\n  }\n\n  if (minZoom < zoom) {\n    return zoom;\n  }\n  return minZoom;\n};\n\nvar GoogleMap = function (_Component) {\n  _inherits(GoogleMap, _Component);\n\n  // eslint-disable-line\n\n  function GoogleMap(props) {\n    _classCallCheck(this, GoogleMap);\n\n    var _this = _possibleConstructorReturn(this, (GoogleMap.__proto__ || Object.getPrototypeOf(GoogleMap)).call(this, props));\n\n    _this._getMinZoom = function () {\n      if (_this.geoService_.getWidth() > 0 || _this.geoService_.getHeight() > 0) {\n        var tilesPerWidth = Math.ceil(_this.geoService_.getWidth() / K_GOOGLE_TILE_SIZE) + 2;\n        var tilesPerHeight = Math.ceil(_this.geoService_.getHeight() / K_GOOGLE_TILE_SIZE) + 2;\n        var maxTilesPerDim = Math.max(tilesPerWidth, tilesPerHeight);\n        return Math.ceil((0, _log2.default)(maxTilesPerDim));\n      }\n      return DEFAULT_MIN_ZOOM;\n    };\n\n    _this._computeMinZoom = function (minZoomOverride, minZoom) {\n      if (minZoomOverride) {\n        return minZoom || DEFAULT_MIN_ZOOM;\n      }\n      return _this._getMinZoom();\n    };\n\n    _this._mapDomResizeCallback = function () {\n      _this.resetSizeOnIdle_ = true;\n      if (_this.maps_) {\n        var originalCenter = _this.map_.getCenter();\n        _this.maps_.event.trigger(_this.map_, 'resize');\n        _this.map_.setCenter(originalCenter);\n      }\n    };\n\n    _this._setLayers = function (layerTypes) {\n      layerTypes.forEach(function (layerType) {\n        _this.layers_[layerType] = new _this.maps_[layerType]();\n        _this.layers_[layerType].setMap(_this.map_);\n      });\n    };\n\n    _this._initMap = function () {\n      // only initialize the map once\n      if (_this.initialized_) {\n        return;\n      }\n      _this.initialized_ = true;\n\n      var propsCenter = latLng2Obj(_this.props.center || _this.props.defaultCenter);\n      _this.geoService_.setView(propsCenter, _this.props.zoom || _this.props.defaultZoom, 0);\n\n      _this._onBoundsChanged(); // now we can calculate map bounds center etc...\n\n      var bootstrapURLKeys = _extends({}, _this.props.apiKey && { key: _this.props.apiKey }, _this.props.bootstrapURLKeys);\n\n      _this.props.googleMapLoader(bootstrapURLKeys).then(function (maps) {\n        if (!_this.mounted_) {\n          return;\n        }\n\n        var centerLatLng = _this.geoService_.getCenter();\n\n        var propsOptions = {\n          zoom: _this.props.zoom || _this.props.defaultZoom,\n          center: new maps.LatLng(centerLatLng.lat, centerLatLng.lng)\n        };\n\n        // prevent to exapose full api\n        // next props must be exposed (console.log(Object.keys(pick(maps, isPlainObject))))\n        // \"Animation\", \"ControlPosition\", \"MapTypeControlStyle\", \"MapTypeId\",\n        // \"NavigationControlStyle\", \"ScaleControlStyle\", \"StrokePosition\",\n        // \"SymbolPath\", \"ZoomControlStyle\",\n        // \"event\", \"DirectionsStatus\", \"DirectionsTravelMode\", \"DirectionsUnitSystem\",\n        // \"DistanceMatrixStatus\",\n        // \"DistanceMatrixElementStatus\", \"ElevationStatus\", \"GeocoderLocationType\",\n        // \"GeocoderStatus\", \"KmlLayerStatus\",\n        // \"MaxZoomStatus\", \"StreetViewStatus\", \"TransitMode\", \"TransitRoutePreference\",\n        // \"TravelMode\", \"UnitSystem\"\n        var mapPlainObjects = (0, _pick2.default)(maps, _is_plain_object2.default);\n        var options = typeof _this.props.options === 'function' ? _this.props.options(mapPlainObjects) : _this.props.options;\n        var defaultOptions = defaultOptions_(mapPlainObjects);\n\n        var draggableOptions = _this.props.draggable !== undefined && {\n          draggable: _this.props.draggable\n        };\n\n        var minZoom = _this._computeMinZoom(options.minZoomOverride, options.minZoom);\n        _this.minZoom_ = minZoom;\n\n        var preMapOptions = _extends({}, defaultOptions, {\n          minZoom: minZoom\n        }, options, propsOptions);\n\n        _this.defaultDraggableOption_ = preMapOptions.draggable !== undefined ? preMapOptions.draggable : _this.defaultDraggableOption_;\n\n        var mapOptions = _extends({}, preMapOptions, draggableOptions);\n\n        mapOptions.minZoom = _checkMinZoom(mapOptions.minZoom, minZoom);\n\n        var map = new maps.Map(_reactDom2.default.findDOMNode(_this.googleMapDom_), mapOptions);\n\n        _this.map_ = map;\n        _this.maps_ = maps;\n\n        _this._setLayers(_this.props.layerTypes);\n\n        // render in overlay\n        var this_ = _this;\n        var overlay = Object.assign(new maps.OverlayView(), {\n          onAdd: function onAdd() {\n            var K_MAX_WIDTH = typeof screen !== 'undefined' ? screen.width + 'px' : '2000px';\n            var K_MAX_HEIGHT = typeof screen !== 'undefined' ? screen.height + 'px' : '2000px';\n\n            var div = document.createElement('div');\n            this.div = div;\n            div.style.backgroundColor = 'transparent';\n            div.style.position = 'absolute';\n            div.style.left = '0px';\n            div.style.top = '0px';\n            div.style.width = K_MAX_WIDTH; // prevents some chrome draw defects\n            div.style.height = K_MAX_HEIGHT;\n\n            var panes = this.getPanes();\n            panes.overlayMouseTarget.appendChild(div);\n\n            _reactDom2.default.unstable_renderSubtreeIntoContainer(this_, _react2.default.createElement(_google_map_markers2.default, {\n              experimental: this_.props.experimental,\n              onChildClick: this_._onChildClick,\n              onChildMouseDown: this_._onChildMouseDown,\n              onChildMouseEnter: this_._onChildMouseEnter,\n              onChildMouseLeave: this_._onChildMouseLeave,\n              geoService: this_.geoService_,\n              projectFromLeftTop: true,\n              distanceToMouse: this_.props.distanceToMouse,\n              getHoverDistance: this_._getHoverDistance,\n              dispatcher: this_.markersDispatcher_\n            }), div,\n            // remove prerendered markers\n            function () {\n              return this_.setState({ overlayCreated: true });\n            });\n          },\n          onRemove: function onRemove() {\n            _reactDom2.default.unmountComponentAtNode(this.div);\n          },\n          draw: function draw() {\n            var div = overlay.div;\n            var overlayProjection = overlay.getProjection();\n            var bounds = map.getBounds();\n            var ne = bounds.getNorthEast();\n            var sw = bounds.getSouthWest();\n            var ptx = overlayProjection.fromLatLngToDivPixel(new maps.LatLng(ne.lat(), sw.lng()));\n\n            // need round for safari still can't find what need for firefox\n            var ptxRounded = (0, _detect2.default)().isSafari ? { x: Math.round(ptx.x), y: Math.round(ptx.y) } : { x: ptx.x, y: ptx.y };\n\n            this_.updateCounter_++;\n            this_._onBoundsChanged(map, maps, !this_.props.debounced);\n\n            if (!this_.googleApiLoadedCalled_) {\n              this_._onGoogleApiLoaded({ map: map, maps: maps });\n              this_.googleApiLoadedCalled_ = true;\n            }\n\n            div.style.left = ptxRounded.x + 'px';\n            div.style.top = ptxRounded.y + 'px';\n            if (this_.markersDispatcher_) {\n              this_.markersDispatcher_.emit('kON_CHANGE');\n            }\n          }\n        });\n\n        _this.overlay_ = overlay;\n\n        overlay.setMap(map);\n\n        maps.event.addListener(map, 'zoom_changed', function () {\n          // recalc position at zoom start\n          if (this_.geoService_.getZoom() !== map.getZoom()) {\n            if (!this_.zoomAnimationInProgress_) {\n              this_.zoomAnimationInProgress_ = true;\n              this_._onZoomAnimationStart();\n            }\n\n            var TIMEOUT_ZOOM = 300;\n\n            if (new Date().getTime() - _this.zoomControlClickTime_ < TIMEOUT_ZOOM) {\n              // there is strange Google Map Api behavior in chrome when zoom animation of map\n              // is started only on second raf call, if was click on zoom control\n              // or +- keys pressed, so i wait for two rafs before change state\n\n              // this does not fully prevent animation jump\n              // but reduce it's occurence probability\n              (0, _raf2.default)(function () {\n                return (0, _raf2.default)(function () {\n                  this_.updateCounter_++;\n                  this_._onBoundsChanged(map, maps);\n                });\n              });\n            } else {\n              this_.updateCounter_++;\n              this_._onBoundsChanged(map, maps);\n            }\n          }\n        });\n\n        maps.event.addListener(map, 'idle', function () {\n          if (_this.resetSizeOnIdle_) {\n            _this._setViewSize();\n            var currMinZoom = _this._computeMinZoom(_this.props.options.minZoomOverride, _this.props.options.minZoom);\n\n            if (currMinZoom !== _this.minZoom_) {\n              _this.minZoom_ = currMinZoom;\n              map.setOptions({ minZoom: currMinZoom });\n            }\n\n            _this.resetSizeOnIdle_ = false;\n          }\n\n          if (this_.zoomAnimationInProgress_) {\n            this_.zoomAnimationInProgress_ = false;\n            this_._onZoomAnimationEnd();\n          }\n\n          var div = overlay.div;\n          var overlayProjection = overlay.getProjection();\n          var bounds = map.getBounds();\n          var ne = bounds.getNorthEast();\n          var sw = bounds.getSouthWest();\n          var ptx = overlayProjection.fromLatLngToDivPixel(new maps.LatLng(ne.lat(), sw.lng()));\n          // need round for safari still can't find what need for firefox\n          var ptxRounded = (0, _detect2.default)().isSafari ? { x: Math.round(ptx.x), y: Math.round(ptx.y) } : { x: ptx.x, y: ptx.y };\n\n          this_.updateCounter_++;\n          this_._onBoundsChanged(map, maps);\n\n          if (_this.mouse_) {\n            var latLng = _this.geoService_.unproject(_this.mouse_, true);\n            _this.mouse_.lat = latLng.lat;\n            _this.mouse_.lng = latLng.lng;\n          }\n\n          _this._onChildMouseMove();\n\n          this_.dragTime_ = 0;\n          div.style.left = ptxRounded.x + 'px';\n          div.style.top = ptxRounded.y + 'px';\n          if (this_.markersDispatcher_) {\n            this_.markersDispatcher_.emit('kON_CHANGE');\n            if (this_.fireMouseEventOnIdle_) {\n              this_.markersDispatcher_.emit('kON_MOUSE_POSITION_CHANGE');\n            }\n          }\n        });\n\n        maps.event.addListener(map, 'mouseover', function () {\n          // has advantage over div MouseLeave\n          this_.mouseInMap_ = true;\n        });\n\n        // an alternative way to know the mouse is back within the map\n        // This would not fire when clicking/interacting with google maps\n        // own on-map countrols+markers. This handles an edge case for touch devices\n        // + 'draggable:false' custom option. See #332 for more details.\n        maps.event.addListener(map, 'click', function () {\n          this_.mouseInMap_ = true;\n        });\n\n        maps.event.addListener(map, 'mouseout', function () {\n          // has advantage over div MouseLeave\n          this_.mouseInMap_ = false;\n          this_.mouse_ = null;\n          this_.markersDispatcher_.emit('kON_MOUSE_POSITION_CHANGE');\n        });\n\n        maps.event.addListener(map, 'drag', function () {\n          this_.dragTime_ = new Date().getTime();\n          this_._onDrag();\n        });\n        // user choosing satellite vs roads, etc\n        maps.event.addListener(map, 'maptypeid_changed', function () {\n          this_._onMapTypeIdChange(map.getMapTypeId());\n        });\n      }).catch(function (e) {\n        console.error(e); // eslint-disable-line no-console\n        throw e;\n      });\n    };\n\n    _this._onGoogleApiLoaded = function () {\n      if (_this.props.onGoogleApiLoaded) {\n        var _this$props;\n\n        if (process.env.NODE_ENV !== 'production' && _this.props.yesIWantToUseGoogleMapApiInternals !== true) {\n          console.warn('GoogleMap: ' + // eslint-disable-line\n          'Usage of internal api objects is dangerous ' + 'and can cause a lot of issues.\\n' + 'To hide this warning add yesIWantToUseGoogleMapApiInternals={true} ' + 'to <GoogleMap instance');\n        }\n\n        (_this$props = _this.props).onGoogleApiLoaded.apply(_this$props, arguments);\n      }\n    };\n\n    _this._getHoverDistance = function () {\n      return _this.props.hoverDistance;\n    };\n\n    _this._onDrag = function () {\n      var _this$props2;\n\n      return _this.props.onDrag && (_this$props2 = _this.props).onDrag.apply(_this$props2, arguments);\n    };\n\n    _this._onMapTypeIdChange = function () {\n      var _this$props3;\n\n      return _this.props.onMapTypeIdChange && (_this$props3 = _this.props).onMapTypeIdChange.apply(_this$props3, arguments);\n    };\n\n    _this._onZoomAnimationStart = function () {\n      var _this$props4;\n\n      return _this.props.onZoomAnimationStart && (_this$props4 = _this.props).onZoomAnimationStart.apply(_this$props4, arguments);\n    };\n\n    _this._onZoomAnimationEnd = function () {\n      var _this$props5;\n\n      return _this.props.onZoomAnimationEnd && (_this$props5 = _this.props).onZoomAnimationEnd.apply(_this$props5, arguments);\n    };\n\n    _this._onChildClick = function () {\n      if (_this.props.onChildClick) {\n        var _this$props6;\n\n        return (_this$props6 = _this.props).onChildClick.apply(_this$props6, arguments);\n      }\n      return undefined;\n    };\n\n    _this._onChildMouseDown = function (hoverKey, childProps) {\n      _this.childMouseDownArgs_ = [hoverKey, childProps];\n      if (_this.props.onChildMouseDown) {\n        _this.props.onChildMouseDown(hoverKey, childProps, _extends({}, _this.mouse_));\n      }\n    };\n\n    _this._onChildMouseUp = function () {\n      if (_this.childMouseDownArgs_) {\n        if (_this.props.onChildMouseUp) {\n          var _this$props7;\n\n          (_this$props7 = _this.props).onChildMouseUp.apply(_this$props7, _toConsumableArray(_this.childMouseDownArgs_).concat([_extends({}, _this.mouse_)]));\n        }\n        _this.childMouseDownArgs_ = null;\n        _this.childMouseUpTime_ = new Date().getTime();\n      }\n    };\n\n    _this._onChildMouseMove = function () {\n      if (_this.childMouseDownArgs_) {\n        if (_this.props.onChildMouseMove) {\n          var _this$props8;\n\n          (_this$props8 = _this.props).onChildMouseMove.apply(_this$props8, _toConsumableArray(_this.childMouseDownArgs_).concat([_extends({}, _this.mouse_)]));\n        }\n      }\n    };\n\n    _this._onChildMouseEnter = function () {\n      if (_this.props.onChildMouseEnter) {\n        var _this$props9;\n\n        return (_this$props9 = _this.props).onChildMouseEnter.apply(_this$props9, arguments);\n      }\n      return undefined;\n    };\n\n    _this._onChildMouseLeave = function () {\n      if (_this.props.onChildMouseLeave) {\n        var _this$props10;\n\n        return (_this$props10 = _this.props).onChildMouseLeave.apply(_this$props10, arguments);\n      }\n      return undefined;\n    };\n\n    _this._setViewSize = function () {\n      if (!_this.mounted_) return;\n\n      var mapDom = _reactDom2.default.findDOMNode(_this.googleMapDom_);\n      _this.geoService_.setViewSize(mapDom.clientWidth, mapDom.clientHeight);\n      _this._onBoundsChanged();\n    };\n\n    _this._onWindowResize = function () {\n      _this.resetSizeOnIdle_ = true;\n    };\n\n    _this._onMapMouseMove = function (e) {\n      if (!_this.mouseInMap_) return;\n\n      var currTime = new Date().getTime();\n      var K_RECALC_CLIENT_RECT_MS = 50;\n\n      if (currTime - _this.mouseMoveTime_ > K_RECALC_CLIENT_RECT_MS) {\n        _this.boundingRect_ = e.currentTarget.getBoundingClientRect();\n      }\n      _this.mouseMoveTime_ = currTime;\n\n      var mousePosX = e.clientX - _this.boundingRect_.left;\n      var mousePosY = e.clientY - _this.boundingRect_.top;\n\n      if (!_this.mouse_) {\n        _this.mouse_ = { x: 0, y: 0, lat: 0, lng: 0 };\n      }\n\n      _this.mouse_.x = mousePosX;\n      _this.mouse_.y = mousePosY;\n\n      var latLng = _this.geoService_.unproject(_this.mouse_, true);\n      _this.mouse_.lat = latLng.lat;\n      _this.mouse_.lng = latLng.lng;\n\n      _this._onChildMouseMove();\n\n      if (currTime - _this.dragTime_ < K_IDLE_TIMEOUT) {\n        _this.fireMouseEventOnIdle_ = true;\n      } else {\n        _this.markersDispatcher_.emit('kON_MOUSE_POSITION_CHANGE');\n        _this.fireMouseEventOnIdle_ = false;\n      }\n    };\n\n    _this._onClick = function () {\n      var _this$props11;\n\n      return _this.props.onClick && !_this.childMouseDownArgs_ && new Date().getTime() - _this.childMouseUpTime_ > K_IDLE_CLICK_TIMEOUT && _this.dragTime_ === 0 && (_this$props11 = _this.props).onClick.apply(_this$props11, arguments);\n    };\n\n    _this._onMapClick = function (event) {\n      if (_this.markersDispatcher_) {\n        // support touch events and recalculate mouse position on click\n        _this._onMapMouseMove(event);\n        var currTime = new Date().getTime();\n        if (currTime - _this.dragTime_ > K_IDLE_TIMEOUT) {\n          if (_this.mouse_) {\n            _this._onClick(_extends({}, _this.mouse_, {\n              event: event\n            }));\n          }\n\n          _this.markersDispatcher_.emit('kON_CLICK', event);\n        }\n      }\n    };\n\n    _this._onMapMouseDownNative = function (event) {\n      if (!_this.mouseInMap_) return;\n\n      _this._onMapMouseDown(event);\n    };\n\n    _this._onMapMouseDown = function (event) {\n      if (_this.markersDispatcher_) {\n        var currTime = new Date().getTime();\n        if (currTime - _this.dragTime_ > K_IDLE_TIMEOUT) {\n          // Hovered marker detected at mouse move could be deleted at mouse down time\n          // so it will be good to force hovered marker recalculation\n          _this._onMapMouseMove(event);\n          _this.markersDispatcher_.emit('kON_MDOWN', event);\n        }\n      }\n    };\n\n    _this._onMapMouseDownCapture = function () {\n      if ((0, _detect2.default)().isChrome) {\n        // to fix strange zoom in chrome\n        if (!_this.mouse_) {\n          _this.zoomControlClickTime_ = new Date().getTime();\n        }\n      }\n    };\n\n    _this._onKeyDownCapture = function () {\n      if ((0, _detect2.default)().isChrome) {\n        _this.zoomControlClickTime_ = new Date().getTime();\n      }\n    };\n\n    _this._isCenterDefined = function (center) {\n      return center && ((0, _is_plain_object2.default)(center) && (0, _isNumber2.default)(center.lat) && (0, _isNumber2.default)(center.lng) || center.length === 2 && (0, _isNumber2.default)(center[0]) && (0, _isNumber2.default)(center[1]));\n    };\n\n    _this._onBoundsChanged = function (map, maps, callExtBoundsChange) {\n      if (map) {\n        var gmC = map.getCenter();\n        _this.geoService_.setView([gmC.lat(), gmC.lng()], map.getZoom(), 0);\n      }\n\n      if ((_this.props.onChange || _this.props.onBoundsChange) && _this.geoService_.canProject()) {\n        var zoom = _this.geoService_.getZoom();\n        var bounds = _this.geoService_.getBounds();\n        var centerLatLng = _this.geoService_.getCenter();\n\n        if (!(0, _array_helper2.default)(bounds, _this.prevBounds_, kEPS)) {\n          if (callExtBoundsChange !== false) {\n            var marginBounds = _this.geoService_.getBounds(_this.props.margin);\n            if (_this.props.onBoundsChange) {\n              _this.props.onBoundsChange(_this.centerIsObject_ ? _extends({}, centerLatLng) : [centerLatLng.lat, centerLatLng.lng], zoom, bounds, marginBounds);\n            }\n\n            if (_this.props.onChange) {\n              _this.props.onChange({\n                center: _extends({}, centerLatLng),\n                zoom: zoom,\n                bounds: {\n                  nw: {\n                    lat: bounds[0],\n                    lng: bounds[1]\n                  },\n                  se: {\n                    lat: bounds[2],\n                    lng: bounds[3]\n                  },\n                  sw: {\n                    lat: bounds[4],\n                    lng: bounds[5]\n                  },\n                  ne: {\n                    lat: bounds[6],\n                    lng: bounds[7]\n                  }\n                },\n                marginBounds: {\n                  nw: {\n                    lat: marginBounds[0],\n                    lng: marginBounds[1]\n                  },\n                  se: {\n                    lat: marginBounds[2],\n                    lng: marginBounds[3]\n                  },\n                  sw: {\n                    lat: marginBounds[4],\n                    lng: marginBounds[5]\n                  },\n                  ne: {\n                    lat: marginBounds[6],\n                    lng: marginBounds[7]\n                  }\n                },\n\n                size: _this.geoService_.hasSize() ? {\n                  width: _this.geoService_.getWidth(),\n                  height: _this.geoService_.getHeight()\n                } : {\n                  width: 0,\n                  height: 0\n                }\n              });\n            }\n\n            _this.prevBounds_ = bounds;\n          }\n        }\n      }\n    };\n\n    _this._registerChild = function (ref) {\n      _this.googleMapDom_ = ref;\n    };\n\n    _this.mounted_ = false;\n    _this.initialized_ = false;\n    _this.googleApiLoadedCalled_ = false;\n\n    _this.map_ = null;\n    _this.maps_ = null;\n    _this.prevBounds_ = null;\n\n    _this.layers_ = {};\n\n    _this.mouse_ = null;\n    _this.mouseMoveTime_ = 0;\n    _this.boundingRect_ = null;\n    _this.mouseInMap_ = true;\n\n    _this.dragTime_ = 0;\n    _this.fireMouseEventOnIdle_ = false;\n    _this.updateCounter_ = 0;\n\n    _this.markersDispatcher_ = new _marker_dispatcher2.default(_this);\n    _this.geoService_ = new _geo2.default(K_GOOGLE_TILE_SIZE);\n    _this.centerIsObject_ = (0, _is_plain_object2.default)(_this.props.center);\n\n    _this.minZoom_ = DEFAULT_MIN_ZOOM;\n    _this.defaultDraggableOption_ = true;\n\n    _this.zoomControlClickTime_ = 0;\n\n    _this.childMouseDownArgs_ = null;\n    _this.childMouseUpTime_ = 0;\n\n    _this.googleMapDom_ = null;\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (_this.props.apiKey) {\n        console.warn('GoogleMap: ' + // eslint-disable-line no-console\n        'apiKey is deprecated, use ' + 'bootstrapURLKeys={{key: YOUR_API_KEY}} instead.');\n      }\n\n      if (_this.props.onBoundsChange) {\n        console.warn('GoogleMap: ' + // eslint-disable-line no-console\n        'onBoundsChange is deprecated, use ' + 'onChange({center, zoom, bounds, ...other}) instead.');\n      }\n\n      if (_this.props.center === undefined && _this.props.defaultCenter === undefined) {\n        console.warn('GoogleMap: center or defaultCenter property must be defined' // eslint-disable-line no-console\n        );\n      }\n\n      if (_this.props.zoom === undefined && _this.props.defaultZoom === undefined) {\n        console.warn('GoogleMap: zoom or defaultZoom property must be defined' // eslint-disable-line no-console\n        );\n      }\n    }\n\n    if (_this._isCenterDefined(_this.props.center || _this.props.defaultCenter)) {\n      var propsCenter = latLng2Obj(_this.props.center || _this.props.defaultCenter);\n      _this.geoService_.setView(propsCenter, _this.props.zoom || _this.props.defaultZoom, 0);\n    }\n\n    _this.zoomAnimationInProgress_ = false;\n\n    _this.state = {\n      overlayCreated: false\n    };\n    return _this;\n  }\n\n  _createClass(GoogleMap, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      this.mounted_ = true;\n      window.addEventListener('resize', this._onWindowResize);\n      window.addEventListener('keydown', this._onKeyDownCapture, true);\n      var mapDom = _reactDom2.default.findDOMNode(this.googleMapDom_);\n      // gmap can't prevent map drag if mousedown event already occured\n      // the only workaround I find is prevent mousedown native browser event\n      _reactDom2.default.findDOMNode(this.googleMapDom_).addEventListener('mousedown', this._onMapMouseDownNative, true);\n\n      window.addEventListener('mouseup', this._onChildMouseUp, false);\n\n      var bootstrapURLKeys = _extends({}, this.props.apiKey && { key: this.props.apiKey }, this.props.bootstrapURLKeys);\n\n      this.props.googleMapLoader(bootstrapURLKeys); // we can start load immediatly\n\n      setTimeout(function () {\n        // to detect size\n        _this2._setViewSize();\n        if (_this2._isCenterDefined(_this2.props.center || _this2.props.defaultCenter)) {\n          _this2._initMap();\n        }\n      }, 0, this);\n      if (this.props.resetBoundsOnResize) {\n        var that = this;\n        _detectElementResize2.default.addResizeListener(mapDom, that._mapDomResizeCallback);\n      }\n    }\n  }, {\n    key: 'componentWillReceiveProps',\n    value: function componentWillReceiveProps(nextProps) {\n      var _this3 = this;\n\n      if (process.env.NODE_ENV !== 'production') {\n        if (this.props.defaultCenter !== nextProps.defaultCenter) {\n          console.warn('GoogleMap: defaultCenter prop changed. ' + // eslint-disable-line\n          \"You can't change default props.\");\n        }\n\n        if (this.props.defaultZoom !== nextProps.defaultZoom) {\n          console.warn('GoogleMap: defaultZoom prop changed. ' + // eslint-disable-line\n          \"You can't change default props.\");\n        }\n      }\n\n      if (!this._isCenterDefined(this.props.center) && this._isCenterDefined(nextProps.center)) {\n        setTimeout(function () {\n          return _this3._initMap();\n        }, 0);\n      }\n\n      if (this.map_) {\n        var centerLatLng = this.geoService_.getCenter();\n        if (this._isCenterDefined(nextProps.center)) {\n          var nextPropsCenter = latLng2Obj(nextProps.center);\n          var currCenter = this._isCenterDefined(this.props.center) ? latLng2Obj(this.props.center) : null;\n\n          if (!currCenter || Math.abs(nextPropsCenter.lat - currCenter.lat) + Math.abs(nextPropsCenter.lng - currCenter.lng) > kEPS) {\n            if (Math.abs(nextPropsCenter.lat - centerLatLng.lat) + Math.abs(nextPropsCenter.lng - centerLatLng.lng) > kEPS) {\n              this.map_.panTo({\n                lat: nextPropsCenter.lat,\n                lng: nextPropsCenter.lng\n              });\n            }\n          }\n        }\n\n        if (nextProps.zoom !== undefined) {\n          // if zoom chaged by user\n          if (Math.abs(nextProps.zoom - this.props.zoom) > 0) {\n            this.map_.setZoom(nextProps.zoom);\n          }\n        }\n\n        if (this.props.draggable !== undefined && nextProps.draggable === undefined) {\n          // reset to default\n          this.map_.setOptions({ draggable: this.defaultDraggableOption_ });\n        } else if (this.props.draggable !== nextProps.draggable) {\n          // also prevent this on window 'mousedown' event to prevent map move\n          this.map_.setOptions({ draggable: nextProps.draggable });\n        }\n\n        // use shallowEqual to try avoid calling map._setOptions if only the ref changes\n        if (nextProps.options !== undefined && !(0, _shallowEqual2.default)(this.props.options, nextProps.options)) {\n          var mapPlainObjects = (0, _pick2.default)(this.maps_, _is_plain_object2.default);\n          var options = typeof nextProps.options === 'function' ? nextProps.options(mapPlainObjects) : nextProps.options;\n          // remove zoom, center and draggable options as these are managed by google-maps-react\n          options = (0, _omit2.default)(options, ['zoom', 'center', 'draggable']);\n\n          if ('minZoom' in options) {\n            var minZoom = this._computeMinZoom(options.minZoomOverride, options.minZoom);\n            options.minZoom = _checkMinZoom(options.minZoom, minZoom);\n          }\n\n          this.map_.setOptions(options);\n        }\n\n        if (nextProps.layerTypes !== this.props.layerTypes) {\n          Object.keys(this.layers_).forEach(function (layerKey) {\n            _this3.layers_[layerKey].setMap(null);\n            delete _this3.layers_[layerKey];\n          });\n          this._setLayers(nextProps.layerTypes);\n        }\n      }\n    }\n  }, {\n    key: 'shouldComponentUpdate',\n    value: function shouldComponentUpdate(nextProps, nextState) {\n      // draggable does not affect inner components\n      return !(0, _shallowEqual2.default)((0, _omit2.default)(this.props, ['draggable']), (0, _omit2.default)(nextProps, ['draggable'])) || !(0, _shallowEqual2.default)(this.state, nextState);\n    }\n  }, {\n    key: 'componentDidUpdate',\n    value: function componentDidUpdate(prevProps) {\n      this.markersDispatcher_.emit('kON_CHANGE');\n\n      if (this.props.hoverDistance !== prevProps.hoverDistance) {\n        this.markersDispatcher_.emit('kON_MOUSE_POSITION_CHANGE');\n      }\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      this.mounted_ = false;\n      var mapDom = _reactDom2.default.findDOMNode(this.googleMapDom_);\n      window.removeEventListener('resize', this._onWindowResize);\n      window.removeEventListener('keydown', this._onKeyDownCapture);\n      mapDom.removeEventListener('mousedown', this._onMapMouseDownNative, true);\n      window.removeEventListener('mouseup', this._onChildMouseUp, false);\n      if (this.props.resetBoundsOnResize) {\n        _detectElementResize2.default.removeResizeListener(mapDom, this._mapDomResizeCallback);\n      }\n\n      if (this.overlay_) {\n        // this triggers overlay_.onRemove(), which will unmount the <GoogleMapMarkers/>\n        this.overlay_.setMap(null);\n      }\n\n      if (this.maps_ && this.map_) {\n        // fix google, as otherwise listeners works even without map\n        this.map_.setOptions({ scrollwheel: false });\n        this.maps_.event.clearInstanceListeners(this.map_);\n      }\n\n      this.map_ = null;\n      this.maps_ = null;\n      this.markersDispatcher_.dispose();\n\n      this.resetSizeOnIdle_ = false;\n\n      delete this.map_;\n      delete this.markersDispatcher_;\n    }\n    // calc minZoom if map size available\n    // it's better to not set minZoom less than this calculation gives\n    // otherwise there is no homeomorphism between screen coordinates and map\n    // (one map coordinate can have different screen coordinates)\n\n\n    // this method works only if this.props.onChildMouseDown was called\n\n\n    // this method works only if this.props.onChildMouseDown was called\n\n\n    // K_IDLE_CLICK_TIMEOUT - looks like 300 is enough\n\n\n    // gmap can't prevent map drag if mousedown event already occured\n    // the only workaround I find is prevent mousedown native browser event\n\n  }, {\n    key: 'render',\n    value: function render() {\n      var mapMarkerPrerender = !this.state.overlayCreated ? _react2.default.createElement(_google_map_markers_prerender2.default, {\n        experimental: this.props.experimental,\n        onChildClick: this._onChildClick,\n        onChildMouseDown: this._onChildMouseDown,\n        onChildMouseEnter: this._onChildMouseEnter,\n        onChildMouseLeave: this._onChildMouseLeave,\n        geoService: this.geoService_,\n        projectFromLeftTop: false,\n        distanceToMouse: this.props.distanceToMouse,\n        getHoverDistance: this._getHoverDistance,\n        dispatcher: this.markersDispatcher_\n      }) : null;\n\n      return _react2.default.createElement(\n        'div',\n        {\n          style: this.props.style,\n          onMouseMove: this._onMapMouseMove,\n          onMouseDownCapture: this._onMapMouseDownCapture,\n          onClick: this._onMapClick\n        },\n        _react2.default.createElement(_google_map_map2.default, { registerChild: this._registerChild }),\n        mapMarkerPrerender\n      );\n    }\n  }]);\n\n  return GoogleMap;\n}(_react.Component);\n\nGoogleMap.propTypes = {\n  apiKey: _propTypes2.default.string,\n  bootstrapURLKeys: _propTypes2.default.any,\n\n  defaultCenter: _propTypes2.default.oneOfType([_propTypes2.default.array, _propTypes2.default.shape({\n    lat: _propTypes2.default.number,\n    lng: _propTypes2.default.number\n  })]),\n  center: _propTypes2.default.oneOfType([_propTypes2.default.array, _propTypes2.default.shape({\n    lat: _propTypes2.default.number,\n    lng: _propTypes2.default.number\n  })]),\n  defaultZoom: _propTypes2.default.number,\n  zoom: _propTypes2.default.number,\n  onBoundsChange: _propTypes2.default.func,\n  onChange: _propTypes2.default.func,\n  onClick: _propTypes2.default.func,\n  onChildClick: _propTypes2.default.func,\n  onChildMouseDown: _propTypes2.default.func,\n  onChildMouseUp: _propTypes2.default.func,\n  onChildMouseMove: _propTypes2.default.func,\n  onChildMouseEnter: _propTypes2.default.func,\n  onChildMouseLeave: _propTypes2.default.func,\n  onZoomAnimationStart: _propTypes2.default.func,\n  onZoomAnimationEnd: _propTypes2.default.func,\n  onDrag: _propTypes2.default.func,\n  onMapTypeIdChange: _propTypes2.default.func,\n  options: _propTypes2.default.any,\n  distanceToMouse: _propTypes2.default.func,\n  hoverDistance: _propTypes2.default.number,\n  debounced: _propTypes2.default.bool,\n  margin: _propTypes2.default.array,\n  googleMapLoader: _propTypes2.default.any,\n  onGoogleApiLoaded: _propTypes2.default.func,\n  yesIWantToUseGoogleMapApiInternals: _propTypes2.default.bool,\n  draggable: _propTypes2.default.bool,\n  style: _propTypes2.default.any,\n  resetBoundsOnResize: _propTypes2.default.bool,\n  layerTypes: _propTypes2.default.arrayOf(_propTypes2.default.string) };\nGoogleMap.defaultProps = {\n  distanceToMouse: function distanceToMouse(pt, mousePos /* , markerProps */) {\n    return Math.sqrt((pt.x - mousePos.x) * (pt.x - mousePos.x) + (pt.y - mousePos.y) * (pt.y - mousePos.y));\n  },\n\n  hoverDistance: 30,\n  debounced: true,\n  options: defaultOptions_,\n  googleMapLoader: _google_map_loader2.default,\n  yesIWantToUseGoogleMapApiInternals: false,\n  style: {\n    width: '100%',\n    height: '100%',\n    margin: 0,\n    padding: 0,\n    position: 'relative'\n  },\n  layerTypes: []\n};\nGoogleMap.googleMapLoader = _google_map_loader2.default;\nexports.default = GoogleMap;\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }

})